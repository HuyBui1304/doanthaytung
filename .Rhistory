y = "Mật độ"
) +
theme_minimal(base_size = 16) +
theme(
plot.title = element_text(hjust = 0.5)
)
library(ggplot2)
library(dplyr)
library(gridExtra)
p1 <- train %>%
filter(Activity %in% c("SITTING", "STANDING", "LAYING")) %>%
ggplot(aes(x = tBodyAccMagmean, color = Activity)) +
geom_density(size = 1.2) +
labs(
title = "Static Activities (closer view)",
x = "tBodyAccMagmean",
y = "Density"
) +
xlim(-1.05, -0.1) +
ylim(0, 35) +
theme_minimal(base_size = 14)
p1
p2 <- train %>%
filter(Activity %in% c("WALKING", "WALKING_DOWNSTAIRS", "WALKING_UPSTAIRS")) %>%
ggplot(aes(x = tBodyAccMagmean, color = Activity)) +
geom_density(size = 1.2) +
labs(
title = "Dynamic Activities (closer view)",
x = "tBodyAccMagmean",
y = "Density"
) + xlim(-0.65, 1) +
theme_minimal(base_size = 14)
p2
library(ggplot2)
ggplot(train, aes(x = Activity, y = tBodyAccMagmean)) +
geom_boxplot(
outlier.shape = NA,
fill = "skyblue",
color = "darkgreen",
width = 0.6
) +
labs(
title = "Phân bố giữa tBodyAccMagmean và Activity",
y = "tBodyAccMagmean",
x = "Activity"
) +
coord_cartesian(ylim = c(-1.1, 1.2)) +
theme_minimal(base_size = 14) +
theme(
plot.title = element_text(hjust = 0.5, size = 15, face = "bold"),
axis.text.x = element_text(angle = 45, hjust = 1, size = 10),
axis.title.x = element_text(size = 12),
axis.title.y = element_text(size = 12)
)
library(ggplot2)
ggplot(train, aes(x = Activity, y = angleXgravityMean)) +
geom_boxplot(
fill = "lightblue",
color = "darkblue",
outlier.shape = NA,
width = 0.6
) +
labs(
title = "Phân bố giữa angleXgravityMean và Activity",
x = "Activity",
y = "angleXgravityMean"
) +
theme_minimal(base_size = 14) +
theme(
plot.title = element_text(hjust = 0.5, size = 15, face = "bold"),
axis.text.x = element_text(angle = 40, hjust = 1, size = 11)
)
library(ggplot2)
ggplot(train, aes(x = Activity, y = angleYgravityMean)) +
geom_boxplot(
fill = "lightblue",
color = "darkblue",
outlier.shape = NA,
width = 0.6
) +
labs(
title = "Phân bố giữa angleYgravityMean và Activity",
x = "Activity",
y = "angleYgravityMean"
) +
theme_minimal(base_size = 14) +
theme(
plot.title = element_text(hjust = 0.5, size = 15, face = "bold"),
axis.text.x = element_text(angle = 40, hjust = 1, size = 11)
)
subject_ids <- train$subject
activity_labels <- train$Activity
sensor_data <- train[, !(names(train) %in% c("Activity", "subject"))]
subject_ids_test <- test$subject
activity_labels_test <- test$Activity
sensor_data_test <- test[, !(names(test) %in% c("Activity", "subject"))]
is_outlier_iqr <- function(x) {
Q1 <- quantile(x, 0.25, na.rm = TRUE)
Q3 <- quantile(x, 0.75, na.rm = TRUE)
IQR_val <- Q3 - Q1
lower_bound <- Q1 - 1.5 * IQR_val
upper_bound <- Q3 + 1.5 * IQR_val
x < lower_bound | x > upper_bound
}
outlier_matrix <- mapply(is_outlier_iqr, sensor_data)
total_outlier_values <- sum(outlier_matrix)
total_cells <- nrow(sensor_data) * ncol(sensor_data)
percent_outlier_cells <- round(total_outlier_values / total_cells * 100, 2)
cat("Tổng số giá trị outlier:", total_outlier_values, "/", total_cells, "\n")
cat("Tỷ lệ giá trị outlier:", percent_outlier_cells, "%\n")
cap_outliers <- function(df, lower = 0.01, upper = 0.99) {
for (col in names(df)) {
q_low <- quantile(df[[col]], lower, na.rm = TRUE)
q_high <- quantile(df[[col]], upper, na.rm = TRUE)
df[[col]] <- pmin(pmax(df[[col]], q_low), q_high)
}
df
}
sensor_data_capped <- cap_outliers(sensor_data)
sensor_data_test_capped <- cap_outliers(sensor_data_test)
train_capped <- cbind(sensor_data_capped, subject = subject_ids, Activity = activity_labels)
test_capped <- cbind(sensor_data_test_capped, subject = subject_ids_test, Activity = activity_labels_test)
library(umap)
library(ggplot2)
library(gridExtra)
perform_umap_grid <- function(X_data, y_data,
neighbors_list = c(5, 15, 30),
min_dist_list = c(0.001, 0.01, 0.1)) {
plots <- list()
index <- 1
for (n in neighbors_list) {
for (d in min_dist_list) {
config <- umap.defaults
config$n_neighbors <- n
config$min_dist <- d
config$n_components <- 2
umap_result <- umap(X_data, config = config)
df <- as.data.frame(umap_result$layout)
colnames(df) <- c("x", "y")
df$label <- y_data
p <- ggplot(df, aes(x = x, y = y, color = label)) +
geom_point(size = 0.6, alpha = 0.6) +
scale_color_brewer(palette = "Set1") +
theme_minimal(base_size = 10) +
labs(title = paste("n =", n, ", dist =", d), x = NULL, y = NULL) +
theme(legend.position = "none",
plot.title = element_text(size = 10, hjust = 0.5))
plots[[index]] <- p
index <- index + 1
}
}
do.call(grid.arrange, c(plots, ncol = length(min_dist_list)))
}
perform_umap_grid(
X_data = sensor_data_capped,
y_data = train$Activity,
neighbors_list = c(5, 15, 30),
min_dist_list = c(0.001, 0.01, 0.1)
)
library(umap)
library(ggplot2)
config <- umap.defaults
config$n_neighbors <- 30
config$min_dist <- 0.1
config$n_components <- 2
umap_result <- umap(sensor_data_capped, config = config)
umap_df <- as.data.frame(umap_result$layout)
colnames(umap_df) <- c("UMAP_1", "UMAP_2")
umap_df$Activity <- train$Activity
ggplot(umap_df, aes(x = UMAP_1, y = UMAP_2, color = Activity)) +
geom_point(size = 0.7, alpha = 0.6) +
scale_color_brewer(palette = "Set1") +
theme_minimal(base_size = 14) +
labs(
title = "UMAP (n_neighbors = 30, min_dist = 0.01)",
x = "UMAP 1", y = "UMAP 2"
)
X_train <- train_capped[, !(names(train_capped) %in% c("subject", "Activity"))]
y_train <- train_capped$Activity
X_test <- test_capped[, !(names(test_capped) %in% c("subject", "Activity"))]
y_test <- test_capped$Activity
dim(X_train)
length(y_train)
dim(X_test)
length(y_test)
train_and_evaluate_model <- function(
model_name,
X_train, y_train, X_test, y_test,
class_labels,
tuneGrid = NULL,
k_folds = 5
) {
if (!require(caret)) install.packages("caret", quiet = TRUE)
if (!require(ggplot2)) install.packages("ggplot2", quiet = TRUE)
library(caret)
library(ggplot2)
y_train <- as.factor(y_train)
y_test <- as.factor(y_test)
ctrl <- trainControl(method = "cv", number = k_folds)
set.seed(123)
model_cv <- train(
x = X_train,
y = y_train,
method = model_name,
trControl = ctrl,
tuneGrid = tuneGrid
)
cat("----------------------------\n")
cat("| Best Avg Accuracy of CV Grid  |\n")
cat("----------------------------\n")
print(round(mean(model_cv$results$Accuracy), 4))
cat('--------------------------\n')
cat('|     Best Parameters     |\n')
cat('--------------------------\n')
for (param in names(model_cv$bestTune)) {
cat(sprintf("  %s = %s\n", param, model_cv$bestTune[[param]]))
}
set.seed(123)
best_model <- train(
x = X_train,
y = y_train,
method = model_name,
trControl = trainControl(method = "none"),
tuneGrid = model_cv$bestTune
)
y_pred <- predict(best_model, X_test)
accuracy <- mean(y_pred == y_test)
cat('--------------------------\n')
cat('|     Test Accuracy       |\n')
cat('--------------------------\n')
print(round(accuracy, 4))
cm <- confusionMatrix(y_pred, y_test, mode = "everything")
cat('--------------------------\n')
cat('| Precision / Recall / F1 |\n')
cat('--------------------------\n')
report <- cm$byClass[, c("Precision", "Recall", "F1")]
print(round(report, 4))
cm_df <- as.data.frame(cm$table)
colnames(cm_df) <- c("Predicted", "Actual", "Freq")
p <- ggplot(data = cm_df, aes(x = Actual, y = Predicted, fill = Freq)) +
geom_tile(color = "white") +
geom_text(aes(label = Freq), color = "black", size = 5) +
scale_fill_gradient(low = "white", high = "darkgreen") +
labs(title = "Confusion Matrix", x = "True Label", y = "Predicted Label") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
print(p)
return(list(
model = best_model,
accuracy = accuracy,
best_parameters = model_cv$bestTune,
report = report,
confusion_matrix = cm$table,
prediction = y_pred
))
}
grid_logistic <- expand.grid(
alpha = c(0, 1),
lambda = 1 / c(0.01, 0.1, 1, 10, 20, 30)
)
results_log <- train_and_evaluate_model(
model_name = "glmnet",
X_train = X_train, y_train = y_train,
X_test = X_test, y_test = y_test,
class_labels = labels,
tuneGrid = grid_logistic,
k_folds = 5
)
# train <-read.csv('/Users/huy/Documents/doanthaytung/archive/train.csv')
# train <-read.csv("D:/BT/clonegit/doanthaytung/archive/train.csv")
train <- read.csv('archive/train.csv')
head(train)
dim(train)
# test <-read.csv('/Users/huy/Documents/doanthaytung/archive/test.csv')
# test <-read.csv("D:/BT/clonegit/doanthaytung/archive/test.csv")
test <- read.csv("archive/test.csv")
head(test)
dim(test)
table(sapply(train, class))
names(train)[sapply(train, class) == "character"]
unique(train$Activity)
train$Activity <- as.factor(train$Activity)
test$Activity <- as.factor(test$Activity)
cat("Giá trị thiếu ở tập train:", sum(is.na(train)), "\n")
cat("Giá trị thiếu ở tập test:", sum(is.na(test)), "\n")
cat("Số dòng bị trùng lặp trong tập train:", sum(duplicated(train)), "\n")
cat("Số dòng bị trùng lặp trong tập test :", sum(duplicated(test)), "\n")
columns <- colnames(train)
columns <- gsub("\\.", "", columns)
colnames(train) <- columns
colnames(test) <- columns
library(ggplot2)
library(showtext)
showtext_auto()
ggplot(train, aes(x = factor(subject), fill = Activity)) +
geom_bar(position = "dodge", width = 0.7) +
scale_fill_brewer(palette = "Set2") +
labs(
title = "Số lượng mẫu dữ liệu theo người dùng và hoạt động",
x = "Người dùng (Subject)",
y = "Số lượng mẫu",
fill = "Hoạt động"
) +
theme_minimal(base_size = 16) +
theme(
plot.title = element_text(hjust = 0.5, face = "bold", size = 20),
axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "right"
)
library(ggplot2)
ggplot(train, aes(x = Activity, fill = Activity)) +
geom_bar() +
labs(
title = "Số lượng mẫu theo từng hoạt động",
x = "Hoạt động",
y = "Số lượng mẫu"
) +
theme_minimal(base_size = 15) +
theme(
axis.text.x = element_text(angle = 45, vjust = 1, hjust=1),
plot.title = element_text(hjust = 0.5, face = "bold")
) +
guides(fill = "none")
library(ggplot2)
ggplot(train, aes(x = tBodyAccMagmean, color = Activity)) +
geom_density(size = 1.2) +
scale_color_brewer(palette = "Set1") +
scale_x_continuous(limits = c(-1.1, 1)) +
labs(
title = "Phân bố tBodyAccMagmean theo hoạt động",
x = "tBodyAccMagmean",
y = "Mật độ"
) +
theme_minimal(base_size = 16) +
theme(
plot.title = element_text(hjust = 0.5)
)
library(ggplot2)
library(dplyr)
library(gridExtra)
p1 <- train %>%
filter(Activity %in% c("SITTING", "STANDING", "LAYING")) %>%
ggplot(aes(x = tBodyAccMagmean, color = Activity)) +
geom_density(size = 1.2) +
labs(
title = "Static Activities (closer view)",
x = "tBodyAccMagmean",
y = "Density"
) +
xlim(-1.05, -0.1) +
ylim(0, 35) +
theme_minimal(base_size = 14)
p1
library(ggplot2)
library(dplyr)
library(gridExtra)
p1 <- train %>%
filter(Activity %in% c("SITTING", "STANDING", "LAYING")) %>%
ggplot(aes(x = tBodyAccMagmean, color = Activity)) +
geom_density(size = 1.2) +
labs(
title = "Static Activities (closer view)",
x = "tBodyAccMagmean",
y = "Density"
) +
xlim(-1.05, -0.1) +
ylim(0, 35) +
theme_minimal(base_size = 14)
p1
p2 <- train %>%
filter(Activity %in% c("WALKING", "WALKING_DOWNSTAIRS", "WALKING_UPSTAIRS")) %>%
ggplot(aes(x = tBodyAccMagmean, color = Activity)) +
geom_density(size = 1.2) +
labs(
title = "Dynamic Activities (closer view)",
x = "tBodyAccMagmean",
y = "Density"
) + xlim(-0.65, 1) +
theme_minimal(base_size = 14)
p2
library(ggplot2)
ggplot(train, aes(x = Activity, y = tBodyAccMagmean)) +
geom_boxplot(
outlier.shape = NA,
fill = "skyblue",
color = "darkgreen",
width = 0.6
) +
labs(
title = "Phân bố giữa tBodyAccMagmean và Activity",
y = "tBodyAccMagmean",
x = "Activity"
) +
coord_cartesian(ylim = c(-1.1, 1.2)) +
theme_minimal(base_size = 14) +
theme(
plot.title = element_text(hjust = 0.5, size = 15, face = "bold"),
axis.text.x = element_text(angle = 45, hjust = 1, size = 10),
axis.title.x = element_text(margin = margin(t = 10)),
axis.title.y = element_text(margin = margin(r = 10))
)
library(ggplot2)
ggplot(train, aes(x = Activity, y = angleXgravityMean)) +
geom_boxplot(
fill = "lightblue",
color = "darkblue",
outlier.shape = NA,
width = 0.6
) +
labs(
title = "Phân bố giữa angleXgravityMean và Activity",
x = "Activity",
y = "angleXgravityMean"
) +
theme_minimal(base_size = 14) +
theme(
plot.title = element_text(hjust = 0.5, size = 15, face = "bold"),
axis.text.x = element_text(angle = 40, hjust = 1, size = 11)
)
library(ggplot2)
ggplot(train, aes(x = Activity, y = angleYgravityMean)) +
geom_boxplot(
fill = "lightblue",
color = "darkblue",
outlier.shape = NA,
width = 0.6
) +
labs(
title = "Phân bố giữa angleYgravityMean và Activity",
x = "Activity",
y = "angleYgravityMean"
) +
theme_minimal(base_size = 14) +
theme(
plot.title = element_text(hjust = 0.5, size = 15, face = "bold"),
axis.text.x = element_text(angle = 40, hjust = 1, size = 11)
)
clear
rmarkdown::render("report.Rmd", output_format = c("pdf_document", "word_document"))
rmarkdown::render("report.Rmd", output_format = c("pdf_document", "word_document"), quiet = TRUE)
rmarkdown::render("report.Rmd", output_format = c("pdf_document", "word_document"))
get wd()
getwd
getwd()
ls
getwd()
list.files()
setwd("Documents")
getwd()
list.files(
đá
ưadaw
đưa
đaawdwad
ưdwadwa
đuaw
adwa
ưa
dưa
dưa
getwd()
list.files()
setwd("doanthaytung")
list.files()
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
rmarkdown::render("report.Rmd", output_format = "pdf_document", quiet = TRUE)
rmarkdown::render("report.Rmd", output_format = "word_document", quiet = TRUE)
rmarkdown::render("report.Rmd", output_format = "html_document", quiet = TRUE)
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
rmarkdown::render("report.Rmd", output_format = "pdf_document", quiet = TRUE)
rmarkdown::render("report.Rmd", output_format = "word_document", quiet = TRUE)
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
rmarkdown::render("report.Rmd", output_format = "pdf_document", quiet = TRUE)
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
rmarkdown::render("report.Rmd", output_format = "pdf_document", quiet = TRUE)
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
rmarkdown::render("report.Rmd", output_format = "pdf_document", quiet = TRUE)
rmarkdown::render("report.Rmd", output_format = "word_document", quiet = TRUE)
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
rmarkdown::render("report.Rmd", output_format = "pdf_document")
rmarkdown::render("report.Rmd", output_format = "word_document")
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
rmarkdown::render("report.Rmd", output_format = "pdf_document")
rmarkdown::render("report.Rmd", output_format = "word_document")
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
rmarkdown::render("report.Rmd", output_format = "pdf_document")
rmarkdown::render("report.Rmd", output_format = "word_document")
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
rmarkdown::render("report.Rmd", output_format = "word_document")
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
rmarkdown::render("report.Rmd", output_format = "word_document")
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
rmarkdown::render("report.Rmd", output_format = "word_document")
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
rmarkdown::render("report.Rmd", output_format = "word_document")
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
rmarkdown::render("report.Rmd", output_format = "word_document")
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
rmarkdown::render("report.Rmd", output_format = "word_document")
rmarkdown::render("report.Rmd", output_format = "pdf_document")
knitr::purl("report.Rmd")
# train <-read.csv('/Users/huy/Documents/doanthaytung/archive/train.csv')
# train <-read.csv("D:/BT/clonegit/doanthaytung/archive/train.csv")
train <- read.csv('archive/train.csv')
# test <-read.csv('/Users/huy/Documents/doanthaytung/archive/test.csv')
# test <-read.csv("D:/BT/clonegit/doanthaytung/archive/test.csv")
test <- read.csv("archive/test.csv")
#head(train)
dim(train)
#head(test)
dim(test)
table(sapply(train, class))
